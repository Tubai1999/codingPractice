Chef has a binary string S of length N. Chef can perform the following operation on S any number of times (possibly zero):

Choose a number X (1≤X≤N) that hasn't been chosen in any previous operation and flip any substring of S having length X (i.e. change all 0s to 1s and all 1s to 0s in any substring of S having length X).
Chef wants to transform S into a non-decreasing string using any sequence of operations. Can you help Chef find such a sequence of operations?

If there are multiple answers, print any.

Input Format
The first line contains a single integer T - the number of test cases. Then the test cases follow.
The first line of each test case contains an integer N - the length of the binary string S.
The second line of each test case contains a binary string S of length N containing 0s and 1s only.
Output Format
For each test case,

Output in the first line K - the number of operations applied.
In each of the following K lines, output two integers i and X - the starting index of the substring selected and the length of the substring. (Note that X selected should not be used in any of the previous operations)
Constraints
1≤T≤100
1≤N≤1000
Sample Input 1 
3
6
110111
9
110110111
5
00111
Sample Output 1 
1
1 2
2
1 2
4 3
0
Explanation
Test Case 1: The operations applied are as follows: 11–––0111→000111.

Test Case 2: The operations applied are as follows: 11–––0110111→000110––––111→000001111.




import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-->0)
		{
		    int N = sc.nextInt();sc.nextLine();
		    String s = sc.nextLine(); char[] arr = s.toCharArray();
		    HashMap<Integer,Integer> map = new HashMap<>();
		    
		    for(int i=0;i<N;i++)
		    {
		        
		        if(arr[i]=='1')
		        {
		            map.put(i+1,N-i);
		            for(int j=i;j<N;j++)
		            {
		                if(arr[j]=='1') arr[j]='0';
		                else arr[j]='1';
		            }
		        }
		    }
		    
		    System.out.println(map.size());
		    
		    for(Map.Entry<Integer,Integer> set : map.entrySet())
		    {
		        System.out.println(set.getKey()+" "+set.getValue());
		    }
		    
		    
		    
		}
	}
}
