For a positive integer M, MoEngage defines digitSum(M) as the sum of digits of the number M (when written in decimal).

For example, digitSum(1023)=1+0+2+3=6.

Given a positive integer N, find the smallest integer X strictly greater than N such that:

digitSum(N) and digitSum(X) have different parity, i.e. one of them is odd and the other is even.
Input Format
The first line contains an integer T, the number of test cases. The description of the T test cases follow.
Each test case consists of a single line of input with a single integer, the number N.
Output Format
For each test case, print in a single line, an integer, the answer to the problem.
Constraints
1≤T≤1000
1≤N<109
Sample Input 1 
3
123
19
509
Sample Output 1 
124
21
511
Explanation
Test Case 1: digitSum(123)=1+2+3=6 is even and digitSum(124)=1+2+4=7 is odd, so the answer is 124.

Test Case 2: digitSum(19)=1+9=10 is even, digitSum(20)=2+0=2 is also even, whereas digitSum(21)=2+1=3 is odd. Hence, the answer is 21.

Test Case 3: digitSum(509)=5+0+9=14 is even, digitSum(510)=5+1+0=6 is also even, whereas digitSum(511)=5+1+1=7 is odd. Hence, the answer is 511.



/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    static int sum_digit(int n)
    {
        int ans = 0;
        while(n>0)
        {
            ans = ans +(n%10);
            n=n/10;
        }return ans;
    }
    
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t-->0)
		{
		    int n =sc.nextInt();
		    int ans1=sum_digit(n);
		    if(ans1%2 == 0)
		    {
		        n++;
		        while(true)
		        {
		            if(sum_digit(n) %2 != 0)
		            {
		                System.out.println(n);break;
		            }n++;
		            
		        }
		    }
		    else
		    {
		        n++;
		        while(true)
		        {
		            if(sum_digit(n)%2 == 0)
		            {
		                System.out.println(n);break;
		            }n++;
		            
		        }
		    }
		    
		}
	}
}
